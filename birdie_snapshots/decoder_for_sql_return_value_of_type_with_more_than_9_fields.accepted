---
version: 1.1.3
title: Decoder for SQL return value of type with more than 9 fields
file: ./test/jenny_test.gleam
test_name: sql_decoder_more_than_9_test
---
pub fn user_from_sql() -> dynamic.Decoder(User) {
  fn(dyn) {
    let v0 = dynamic.string(dyn)
    let v1 = dynamic.string(dyn)
    let v2 = dynamic.string(dyn)
    let v3 = dynamic.string(dyn)
    let v4 = dynamic.string(dyn)
    let v5 = dynamic.string(dyn)
    let v6 = dynamic.string(dyn)
    let v7 = dynamic.string(dyn)
    let v8 = dynamic.string(dyn)
    let v9 = dynamic.string(dyn)
    case v0, v1, v2, v3, v4, v5, v6, v7, v8, v9 {
      Ok(v0), Ok(v1), Ok(v2), Ok(v3), Ok(v4), Ok(v5), Ok(v6), Ok(v7), Ok(v8), Ok(v9) -> Ok(User(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9))
      _, _, _, _, _, _, _, _, _, _ -> {
        [v0, v1, v2, v3, v4, v5, v6, v7, v8, v9]
        |> list.filter_map(fn(val) {
          case val {
            Ok(_val) -> Error(Nil)
            Error(decode_error) -> Ok(decode_error)
          }
        })
        |> list.flatten
        |> Error
      }
    }
  }
}